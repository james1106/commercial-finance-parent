syntax = "proto3";

import "common/common.proto";

option go_package = "github.com/xncc/protos/configuration";
option java_package = "com.xiangna.www.protos.configuration";

package protos;
//======================================================私有配置信息=======================================
// 节点信息
message NodeConfig {
    //一般 情况，有多少个 peer就会有多少个 sdk， 每个 sdk 带有一个 user
    string pem = 1; //peer 公钥信息
    string sdkCert = 2; //sdk  证书信息
    string sdkUserName = 3; //sdk  用户名
    string sdkUserPWD = 4; //sdk  密码
}

message NodeConfigs {
    repeated NodeConfig nodeConfigs = 1; //节点信息，可能存在多个节点
}

//APPConfig 是不公开的
message APPConfig {
    string appId = 1; // 主键，不同的app代表不同的机构，核心企业、供应商、保理公司都是不同的appId
    string appKey = 2; // 分配的密钥，用于和区块链系统之间的一些加密、验证用途
    string appName = 3; // 该应用的名称，例如香纳保理业务系统
    string appType = 4; // 该应用的类型，例如供应商、保理、核心企业、银行
    string appCallbackUrl = 5; // 调用OA系统的url地址
    string secureIp = 6; // 区块链会调用第三方ERP的IP列表，用于IP限制，用;分割

    string orgName = 7; // 机构名称
    string orgAddress = 8; // 机构地址
    string bizContactName = 9; // 业务接口人姓名，与User表没联系
    string bizContactTel = 10; // 业务接口人电话
    string bizContaceEmail = 11; // 业务接口人email
    string techContactName = 12; // 技术接口人姓名，与User表没联系
    string techContactTel = 13; // 技术接口人电话
    string techContactEmail = 14; // 技术接口人电话email

    OperateInfo opInfo = 15;
}
