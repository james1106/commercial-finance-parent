// Code generated by protoc-gen-go.
// source: configuration/modelconfig.proto
// DO NOT EDIT!

package configuration

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import protos "github.com/xncc/protos/common"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// ======================================================三方关系配置信息=======================================
// 机构信息，在入三方账本时放到账本中公开
type CommercialOrg struct {
	AppId   string `protobuf:"bytes,1,opt,name=appId" json:"appId,omitempty"`
	AppName string `protobuf:"bytes,2,opt,name=appName" json:"appName,omitempty"`
	AppType string `protobuf:"bytes,3,opt,name=appType" json:"appType,omitempty"`
	// 如果三证合一只需要填写统一社会信用代码
	OrgCode                      string `protobuf:"bytes,4,opt,name=org_code,json=orgCode" json:"org_code,omitempty"`
	RegistedNo                   string `protobuf:"bytes,5,opt,name=registed_no,json=registedNo" json:"registed_no,omitempty"`
	TaxRegistrationCertificateNo string `protobuf:"bytes,6,opt,name=tax_registration_certificate_no,json=taxRegistrationCertificateNo" json:"tax_registration_certificate_no,omitempty"`
	// 机构基本信息
	OrgCorporate    string                            `protobuf:"bytes,7,opt,name=org_corporate,json=orgCorporate" json:"org_corporate,omitempty"`
	ContactPerson   []*CommercialOrg_OrgContactPerson `protobuf:"bytes,8,rep,name=contact_person,json=contactPerson" json:"contact_person,omitempty"`
	Introduction    string                            `protobuf:"bytes,9,opt,name=introduction" json:"introduction,omitempty"`
	RegisterAddress string                            `protobuf:"bytes,10,opt,name=register_address,json=registerAddress" json:"register_address,omitempty"`
	CurrentAddress  string                            `protobuf:"bytes,11,opt,name=current_address,json=currentAddress" json:"current_address,omitempty"`
	Telephone       string                            `protobuf:"bytes,12,opt,name=telephone" json:"telephone,omitempty"`
	Email           string                            `protobuf:"bytes,13,opt,name=email" json:"email,omitempty"`
	OrgCategory     string                            `protobuf:"bytes,14,opt,name=org_category,json=orgCategory" json:"org_category,omitempty"`
	// 三方账本时:
	//           供应商维护两个账户
	//           核心企业维护一个还款账户到结算账户
	//           保理公司维护两个账户:一个放款账户到结算账户,一个收还款账户
	// 双方账本时：
	//           保理公司维护两个账户
	//           保理公司维护两个账户:一个放款账户到结算账户,一个收还款账户
	SettlementAccount *protos.OrgBankAccount `protobuf:"bytes,15,opt,name=settlement_account,json=settlementAccount" json:"settlement_account,omitempty"`
	PolicyAccount     *protos.OrgBankAccount `protobuf:"bytes,16,opt,name=policy_account,json=policyAccount" json:"policy_account,omitempty"`
	OrgFiles          []*protos.LedgerFile   `protobuf:"bytes,17,rep,name=org_files,json=orgFiles" json:"org_files,omitempty"`
	OperateInfo       *protos.OperateInfo    `protobuf:"bytes,18,opt,name=operate_info,json=operateInfo" json:"operate_info,omitempty"`
}

func (m *CommercialOrg) Reset()                    { *m = CommercialOrg{} }
func (m *CommercialOrg) String() string            { return proto.CompactTextString(m) }
func (*CommercialOrg) ProtoMessage()               {}
func (*CommercialOrg) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *CommercialOrg) GetContactPerson() []*CommercialOrg_OrgContactPerson {
	if m != nil {
		return m.ContactPerson
	}
	return nil
}

func (m *CommercialOrg) GetSettlementAccount() *protos.OrgBankAccount {
	if m != nil {
		return m.SettlementAccount
	}
	return nil
}

func (m *CommercialOrg) GetPolicyAccount() *protos.OrgBankAccount {
	if m != nil {
		return m.PolicyAccount
	}
	return nil
}

func (m *CommercialOrg) GetOrgFiles() []*protos.LedgerFile {
	if m != nil {
		return m.OrgFiles
	}
	return nil
}

func (m *CommercialOrg) GetOperateInfo() *protos.OperateInfo {
	if m != nil {
		return m.OperateInfo
	}
	return nil
}

// 机构联系人
type CommercialOrg_OrgContactPerson struct {
	Name      string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Telephone string `protobuf:"bytes,2,opt,name=telephone" json:"telephone,omitempty"`
	Email     string `protobuf:"bytes,3,opt,name=email" json:"email,omitempty"`
}

func (m *CommercialOrg_OrgContactPerson) Reset()         { *m = CommercialOrg_OrgContactPerson{} }
func (m *CommercialOrg_OrgContactPerson) String() string { return proto.CompactTextString(m) }
func (*CommercialOrg_OrgContactPerson) ProtoMessage()    {}
func (*CommercialOrg_OrgContactPerson) Descriptor() ([]byte, []int) {
	return fileDescriptor2, []int{0, 0}
}

// 三方机构关系上链数据定义
type FinancingRelation struct {
	LedgerId string `protobuf:"bytes,1,opt,name=ledger_id,json=ledgerId" json:"ledger_id,omitempty"`
	// 三方机构的信息
	// 供应商需要在扩展字段中保留供应商扩展信息
	Supplier   *CommercialOrg `protobuf:"bytes,2,opt,name=supplier" json:"supplier,omitempty"`
	Enterprise *CommercialOrg `protobuf:"bytes,3,opt,name=enterprise" json:"enterprise,omitempty"`
	Factoring  *CommercialOrg `protobuf:"bytes,4,opt,name=factoring" json:"factoring,omitempty"`
	// 三方机构关系确立时可以设定默认的融资利率
	Rate int64 `protobuf:"varint,5,opt,name=rate" json:"rate,omitempty"`
	// 三方机构关系确立的相关合同文件
	Files []*protos.LedgerFile `protobuf:"bytes,6,rep,name=files" json:"files,omitempty"`
	// 保理向银行融资贷款时,勾选此三方的融资订单为质押
	// 银行需要拥有此三方账本,此字段只是备注记录,不做他用
	Banks *Banks `protobuf:"bytes,7,opt,name=banks" json:"banks,omitempty"`
}

func (m *FinancingRelation) Reset()                    { *m = FinancingRelation{} }
func (m *FinancingRelation) String() string            { return proto.CompactTextString(m) }
func (*FinancingRelation) ProtoMessage()               {}
func (*FinancingRelation) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *FinancingRelation) GetSupplier() *CommercialOrg {
	if m != nil {
		return m.Supplier
	}
	return nil
}

func (m *FinancingRelation) GetEnterprise() *CommercialOrg {
	if m != nil {
		return m.Enterprise
	}
	return nil
}

func (m *FinancingRelation) GetFactoring() *CommercialOrg {
	if m != nil {
		return m.Factoring
	}
	return nil
}

func (m *FinancingRelation) GetFiles() []*protos.LedgerFile {
	if m != nil {
		return m.Files
	}
	return nil
}

func (m *FinancingRelation) GetBanks() *Banks {
	if m != nil {
		return m.Banks
	}
	return nil
}

// 银行列表
type Banks struct {
	Banks []*protos.AppVo `protobuf:"bytes,1,rep,name=banks" json:"banks,omitempty"`
}

func (m *Banks) Reset()                    { *m = Banks{} }
func (m *Banks) String() string            { return proto.CompactTextString(m) }
func (*Banks) ProtoMessage()               {}
func (*Banks) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

func (m *Banks) GetBanks() []*protos.AppVo {
	if m != nil {
		return m.Banks
	}
	return nil
}

// 银行保理双方关系上链数据定义
type BankLoanRelation struct {
	LedgerId string `protobuf:"bytes,1,opt,name=ledger_id,json=ledgerId" json:"ledger_id,omitempty"`
	// 银行和保理双方机构的信息
	Factoring *CommercialOrg `protobuf:"bytes,2,opt,name=factoring" json:"factoring,omitempty"`
	BankInfo  *CommercialOrg `protobuf:"bytes,3,opt,name=bank_info,json=bankInfo" json:"bank_info,omitempty"`
	// 双方机构关系确立时可以设定默认的融资利率
	Rate int64 `protobuf:"varint,4,opt,name=rate" json:"rate,omitempty"`
	// 双方机构关系确立的相关合同文件
	Files []*protos.LedgerFile `protobuf:"bytes,5,rep,name=files" json:"files,omitempty"`
}

func (m *BankLoanRelation) Reset()                    { *m = BankLoanRelation{} }
func (m *BankLoanRelation) String() string            { return proto.CompactTextString(m) }
func (*BankLoanRelation) ProtoMessage()               {}
func (*BankLoanRelation) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{3} }

func (m *BankLoanRelation) GetFactoring() *CommercialOrg {
	if m != nil {
		return m.Factoring
	}
	return nil
}

func (m *BankLoanRelation) GetBankInfo() *CommercialOrg {
	if m != nil {
		return m.BankInfo
	}
	return nil
}

func (m *BankLoanRelation) GetFiles() []*protos.LedgerFile {
	if m != nil {
		return m.Files
	}
	return nil
}

func init() {
	proto.RegisterType((*CommercialOrg)(nil), "protos.CommercialOrg")
	proto.RegisterType((*CommercialOrg_OrgContactPerson)(nil), "protos.CommercialOrg.OrgContactPerson")
	proto.RegisterType((*FinancingRelation)(nil), "protos.FinancingRelation")
	proto.RegisterType((*Banks)(nil), "protos.Banks")
	proto.RegisterType((*BankLoanRelation)(nil), "protos.BankLoanRelation")
}

func init() { proto.RegisterFile("configuration/modelconfig.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 730 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x95, 0xdf, 0x4e, 0x2b, 0x37,
	0x10, 0xc6, 0x95, 0x84, 0xe4, 0x24, 0xb3, 0x49, 0x08, 0x3e, 0x6d, 0xe5, 0x9e, 0x1e, 0x09, 0x1a,
	0x50, 0x9b, 0x4a, 0x55, 0xa2, 0x06, 0xb5, 0x77, 0xbd, 0x00, 0x04, 0x12, 0x12, 0x85, 0x6a, 0x55,
	0xf5, 0x82, 0x9b, 0x95, 0xf1, 0x3a, 0x8b, 0xc5, 0xae, 0xc7, 0xf2, 0x3a, 0x22, 0xbc, 0x56, 0x1f,
	0xa6, 0x0f, 0xd1, 0xa7, 0xa8, 0x6c, 0x67, 0xf3, 0xa7, 0x22, 0x94, 0xab, 0x5d, 0x7f, 0xf3, 0x9b,
	0xb5, 0xfd, 0xcd, 0x4c, 0x02, 0x87, 0x1c, 0xd5, 0x4c, 0x66, 0x73, 0xc3, 0xac, 0x44, 0x35, 0x29,
	0x30, 0x15, 0x79, 0x90, 0xc6, 0xda, 0xa0, 0x45, 0xd2, 0xf2, 0x8f, 0xf2, 0xd3, 0x47, 0x8e, 0x45,
	0x81, 0x6a, 0x12, 0x1e, 0x21, 0x38, 0xfc, 0xa7, 0x05, 0xbd, 0x0b, 0x2c, 0x0a, 0x61, 0xb8, 0x64,
	0xf9, 0x9d, 0xc9, 0xc8, 0x17, 0xd0, 0x64, 0x5a, 0x5f, 0xa7, 0xb4, 0x76, 0x54, 0x1b, 0x75, 0xe2,
	0xb0, 0x20, 0x14, 0x3e, 0x30, 0xad, 0x6f, 0x59, 0x21, 0x68, 0xdd, 0xeb, 0xd5, 0x72, 0x19, 0xf9,
	0xe3, 0x45, 0x0b, 0xda, 0x58, 0x45, 0xdc, 0x92, 0x7c, 0x0d, 0x6d, 0x34, 0x59, 0xc2, 0x31, 0x15,
	0x74, 0x2f, 0x84, 0xd0, 0x64, 0x17, 0x98, 0x0a, 0x72, 0x08, 0x91, 0x11, 0x99, 0x2c, 0xad, 0x48,
	0x13, 0x85, 0xb4, 0xe9, 0xa3, 0x50, 0x49, 0xb7, 0x48, 0x2e, 0xe1, 0xd0, 0xb2, 0x45, 0x12, 0x94,
	0x70, 0xb5, 0x84, 0x0b, 0x63, 0xe5, 0x4c, 0x72, 0x66, 0x85, 0x4b, 0x6a, 0xf9, 0xa4, 0xcf, 0x96,
	0x2d, 0xe2, 0x0d, 0xea, 0x62, 0x0d, 0xdd, 0x22, 0x39, 0x86, 0x5e, 0x38, 0x82, 0xd1, 0x68, 0x98,
	0x15, 0xf4, 0x83, 0x4f, 0xea, 0xfa, 0x73, 0x2c, 0x35, 0xf2, 0x1b, 0xf4, 0x39, 0x2a, 0xcb, 0xb8,
	0x4d, 0xb4, 0x30, 0x25, 0x2a, 0xda, 0x3e, 0x6a, 0x8c, 0xa2, 0xe9, 0x77, 0xc1, 0xa3, 0x72, 0xbc,
	0x65, 0xd0, 0xf8, 0xce, 0xe5, 0x7a, 0xfc, 0x77, 0x4f, 0xc7, 0x3d, 0xbe, 0xb9, 0x24, 0x43, 0xe8,
	0x4a, 0x65, 0x0d, 0xa6, 0x73, 0xee, 0x0e, 0x44, 0x3b, 0x61, 0xcb, 0x4d, 0x8d, 0xfc, 0x00, 0x83,
	0xe5, 0x65, 0x4d, 0xc2, 0xd2, 0xd4, 0x88, 0xb2, 0xa4, 0xe0, 0xb9, 0xfd, 0x4a, 0x3f, 0x0b, 0x32,
	0xf9, 0x1e, 0xf6, 0xf9, 0xdc, 0x18, 0xa1, 0xec, 0x8a, 0x8c, 0x3c, 0xd9, 0x5f, 0xca, 0x15, 0xf8,
	0x19, 0x3a, 0x56, 0xe4, 0x42, 0x3f, 0xa2, 0x12, 0xb4, 0xeb, 0x91, 0xb5, 0xe0, 0xca, 0x2a, 0x0a,
	0x26, 0x73, 0xda, 0x0b, 0x65, 0xf5, 0x0b, 0xf2, 0x2d, 0x74, 0xbd, 0x3f, 0xcc, 0x8a, 0x0c, 0xcd,
	0x0b, 0xed, 0xfb, 0x60, 0xe4, 0xec, 0x59, 0x4a, 0xe4, 0x12, 0x48, 0x29, 0xac, 0xcd, 0x45, 0xe1,
	0x8f, 0xc0, 0x39, 0xce, 0x95, 0xa5, 0xfb, 0x47, 0xb5, 0x51, 0x34, 0xfd, 0xaa, 0x72, 0xe8, 0xce,
	0x64, 0xe7, 0x4c, 0x3d, 0x9d, 0x85, 0x68, 0x7c, 0xb0, 0xce, 0x58, 0x4a, 0xe4, 0x57, 0xe8, 0x6b,
	0xcc, 0x25, 0x7f, 0x59, 0x7d, 0x62, 0xf0, 0xe6, 0x27, 0x7a, 0x81, 0xae, 0xd2, 0x27, 0xd0, 0x71,
	0x07, 0x9d, 0xc9, 0x5c, 0x94, 0xf4, 0xc0, 0x97, 0x87, 0x54, 0x99, 0x37, 0x22, 0xcd, 0x84, 0xb9,
	0x92, 0xb9, 0x88, 0x5d, 0xc3, 0xb9, 0x97, 0x92, 0xfc, 0x02, 0x5d, 0xd4, 0xc2, 0xd5, 0x37, 0x91,
	0x6a, 0x86, 0x94, 0xf8, 0xdd, 0x3e, 0xae, 0x76, 0x0b, 0xb1, 0x6b, 0x35, 0xc3, 0x38, 0xc2, 0xf5,
	0xe2, 0xd3, 0x3d, 0x0c, 0xfe, 0x5b, 0x60, 0x42, 0x60, 0x4f, 0xb9, 0xce, 0x0f, 0x13, 0xe1, 0xdf,
	0xb7, 0xdd, 0xae, 0xef, 0x74, 0xbb, 0xb1, 0xe1, 0xf6, 0xf0, 0xaf, 0x3a, 0x1c, 0x5c, 0x49, 0xc5,
	0x14, 0x97, 0x2a, 0x8b, 0x45, 0xee, 0x1b, 0x96, 0x7c, 0x03, 0x9d, 0xdc, 0xdf, 0x20, 0x91, 0xd5,
	0xd0, 0xb5, 0x83, 0x70, 0x9d, 0x92, 0x9f, 0xa0, 0x5d, 0xce, 0xb5, 0xce, 0xa5, 0x30, 0x7e, 0x97,
	0x68, 0xfa, 0xe5, 0xab, 0x5d, 0x19, 0xaf, 0x30, 0xf2, 0x33, 0x80, 0x50, 0x56, 0x18, 0x6d, 0x64,
	0x19, 0x66, 0x72, 0x67, 0xd2, 0x06, 0x48, 0x4e, 0xa1, 0x33, 0x63, 0xdc, 0xa2, 0x91, 0x2a, 0xf3,
	0xe3, 0xba, 0x33, 0x6b, 0xcd, 0x39, 0x67, 0xfc, 0x58, 0xb9, 0x01, 0x6e, 0xc4, 0xfe, 0x9d, 0x8c,
	0xa0, 0x19, 0xca, 0xd4, 0xda, 0x59, 0xa6, 0x00, 0x90, 0x63, 0x68, 0x3e, 0x30, 0xf5, 0x54, 0xfa,
	0xa9, 0x8c, 0xa6, 0xbd, 0x8a, 0x74, 0x7d, 0x50, 0xc6, 0x21, 0x36, 0xfc, 0x11, 0x9a, 0x7e, 0xbd,
	0xa6, 0x6b, 0xfe, 0xbb, 0x2b, 0xfa, 0x4c, 0xeb, 0x3f, 0xb1, 0xa2, 0xff, 0xae, 0xc1, 0xc0, 0xe1,
	0x37, 0xc8, 0xd4, 0xfb, 0x1c, 0xde, 0xba, 0x77, 0xfd, 0x9d, 0xf7, 0x9e, 0x42, 0xc7, 0xed, 0x17,
	0x5a, 0xeb, 0x4d, 0x8b, 0xdb, 0x8e, 0x73, 0x9d, 0xb5, 0xf2, 0x6a, 0xef, 0x35, 0xaf, 0x9a, 0xff,
	0xe3, 0xd5, 0xf9, 0x0d, 0x9c, 0x70, 0x2c, 0xc6, 0x0b, 0xc9, 0x54, 0xa6, 0xd8, 0xf8, 0xf9, 0xf9,
	0xb9, 0x62, 0xb7, 0x7e, 0xff, 0xef, 0x4f, 0x32, 0x69, 0x1f, 0xe7, 0x0f, 0x63, 0x8e, 0xc5, 0x64,
	0xa1, 0x38, 0x9f, 0x04, 0x6a, 0xb2, 0x45, 0x3d, 0x84, 0xff, 0x84, 0xd3, 0x7f, 0x03, 0x00, 0x00,
	0xff, 0xff, 0x3b, 0xd7, 0x8d, 0xbc, 0x3d, 0x06, 0x00, 0x00,
}
