// Code generated by protoc-gen-go.
// source: financingorder/configuration.proto
// DO NOT EDIT!

package financingorder

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// ======================================================全局配置信息=======================================
// APPID 作为 key， APPConfigBrief为 value存在链上
type APPConfigBrief struct {
	AppId   string `protobuf:"bytes,1,opt,name=appId" json:"appId,omitempty"`
	AppName string `protobuf:"bytes,2,opt,name=appName" json:"appName,omitempty"`
}

func (m *APPConfigBrief) Reset()                    { *m = APPConfigBrief{} }
func (m *APPConfigBrief) String() string            { return proto.CompactTextString(m) }
func (*APPConfigBrief) ProtoMessage()               {}
func (*APPConfigBrief) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *APPConfigBrief) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *APPConfigBrief) GetAppName() string {
	if m != nil {
		return m.AppName
	}
	return ""
}

// ======================================================私有配置信息=======================================
// APPConfig 是不公开的
type APPConfig struct {
	AppId            string        `protobuf:"bytes,1,opt,name=appId" json:"appId,omitempty"`
	AppKey           string        `protobuf:"bytes,2,opt,name=appKey" json:"appKey,omitempty"`
	AppName          string        `protobuf:"bytes,3,opt,name=appName" json:"appName,omitempty"`
	AppType          string        `protobuf:"bytes,4,opt,name=appType" json:"appType,omitempty"`
	AppCallbackUrl   string        `protobuf:"bytes,5,opt,name=appCallbackUrl" json:"appCallbackUrl,omitempty"`
	SecureIp         string        `protobuf:"bytes,6,opt,name=secureIp" json:"secureIp,omitempty"`
	NodeConfigs      []*NodeConfig `protobuf:"bytes,7,rep,name=nodeConfigs" json:"nodeConfigs,omitempty"`
	OrgName          string        `protobuf:"bytes,8,opt,name=orgName" json:"orgName,omitempty"`
	OrgAddress       string        `protobuf:"bytes,9,opt,name=orgAddress" json:"orgAddress,omitempty"`
	BizContactName   string        `protobuf:"bytes,10,opt,name=bizContactName" json:"bizContactName,omitempty"`
	BizContactTel    string        `protobuf:"bytes,11,opt,name=bizContactTel" json:"bizContactTel,omitempty"`
	BizContaceEmail  string        `protobuf:"bytes,12,opt,name=bizContaceEmail" json:"bizContaceEmail,omitempty"`
	TechContactName  string        `protobuf:"bytes,13,opt,name=techContactName" json:"techContactName,omitempty"`
	TechContactTel   string        `protobuf:"bytes,14,opt,name=techContactTel" json:"techContactTel,omitempty"`
	TechContactEmail string        `protobuf:"bytes,15,opt,name=techContactEmail" json:"techContactEmail,omitempty"`
	OpInfo           *OperateInfo  `protobuf:"bytes,16,opt,name=opInfo" json:"opInfo,omitempty"`
}

func (m *APPConfig) Reset()                    { *m = APPConfig{} }
func (m *APPConfig) String() string            { return proto.CompactTextString(m) }
func (*APPConfig) ProtoMessage()               {}
func (*APPConfig) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *APPConfig) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *APPConfig) GetAppKey() string {
	if m != nil {
		return m.AppKey
	}
	return ""
}

func (m *APPConfig) GetAppName() string {
	if m != nil {
		return m.AppName
	}
	return ""
}

func (m *APPConfig) GetAppType() string {
	if m != nil {
		return m.AppType
	}
	return ""
}

func (m *APPConfig) GetAppCallbackUrl() string {
	if m != nil {
		return m.AppCallbackUrl
	}
	return ""
}

func (m *APPConfig) GetSecureIp() string {
	if m != nil {
		return m.SecureIp
	}
	return ""
}

func (m *APPConfig) GetNodeConfigs() []*NodeConfig {
	if m != nil {
		return m.NodeConfigs
	}
	return nil
}

func (m *APPConfig) GetOrgName() string {
	if m != nil {
		return m.OrgName
	}
	return ""
}

func (m *APPConfig) GetOrgAddress() string {
	if m != nil {
		return m.OrgAddress
	}
	return ""
}

func (m *APPConfig) GetBizContactName() string {
	if m != nil {
		return m.BizContactName
	}
	return ""
}

func (m *APPConfig) GetBizContactTel() string {
	if m != nil {
		return m.BizContactTel
	}
	return ""
}

func (m *APPConfig) GetBizContaceEmail() string {
	if m != nil {
		return m.BizContaceEmail
	}
	return ""
}

func (m *APPConfig) GetTechContactName() string {
	if m != nil {
		return m.TechContactName
	}
	return ""
}

func (m *APPConfig) GetTechContactTel() string {
	if m != nil {
		return m.TechContactTel
	}
	return ""
}

func (m *APPConfig) GetTechContactEmail() string {
	if m != nil {
		return m.TechContactEmail
	}
	return ""
}

func (m *APPConfig) GetOpInfo() *OperateInfo {
	if m != nil {
		return m.OpInfo
	}
	return nil
}

// 节点信息
type NodeConfig struct {
	// 一般 情况，有多少个 peer就会有多少个 sdk， 每个 sdk 带有一个 user
	Pem         string `protobuf:"bytes,1,opt,name=pem" json:"pem,omitempty"`
	SdkCert     string `protobuf:"bytes,2,opt,name=sdkCert" json:"sdkCert,omitempty"`
	SdkUserName string `protobuf:"bytes,3,opt,name=sdkUserName" json:"sdkUserName,omitempty"`
	SdkUserPWD  string `protobuf:"bytes,4,opt,name=sdkUserPWD" json:"sdkUserPWD,omitempty"`
}

func (m *NodeConfig) Reset()                    { *m = NodeConfig{} }
func (m *NodeConfig) String() string            { return proto.CompactTextString(m) }
func (*NodeConfig) ProtoMessage()               {}
func (*NodeConfig) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *NodeConfig) GetPem() string {
	if m != nil {
		return m.Pem
	}
	return ""
}

func (m *NodeConfig) GetSdkCert() string {
	if m != nil {
		return m.SdkCert
	}
	return ""
}

func (m *NodeConfig) GetSdkUserName() string {
	if m != nil {
		return m.SdkUserName
	}
	return ""
}

func (m *NodeConfig) GetSdkUserPWD() string {
	if m != nil {
		return m.SdkUserPWD
	}
	return ""
}

// ======================================================三方关系配置信息=======================================
// 机构信息，在入三方账本时放到账本中公开
type CommercialOrg struct {
	AppId   string `protobuf:"bytes,1,opt,name=appId" json:"appId,omitempty"`
	AppName string `protobuf:"bytes,2,opt,name=appName" json:"appName,omitempty"`
	AppType string `protobuf:"bytes,3,opt,name=appType" json:"appType,omitempty"`
	// 如果三证合一只需要填写统一社会信用代码
	OrgCode                      string `protobuf:"bytes,4,opt,name=org_code,json=orgCode" json:"org_code,omitempty"`
	RegistedNo                   string `protobuf:"bytes,5,opt,name=registed_no,json=registedNo" json:"registed_no,omitempty"`
	TaxRegistrationCertificateNo string `protobuf:"bytes,6,opt,name=tax_registration_certificate_no,json=taxRegistrationCertificateNo" json:"tax_registration_certificate_no,omitempty"`
	// 机构基本信息
	OrgCorporate    string                            `protobuf:"bytes,7,opt,name=org_corporate,json=orgCorporate" json:"org_corporate,omitempty"`
	ContactPerson   []*CommercialOrg_OrgContactPerson `protobuf:"bytes,8,rep,name=contact_person,json=contactPerson" json:"contact_person,omitempty"`
	Introduction    string                            `protobuf:"bytes,9,opt,name=introduction" json:"introduction,omitempty"`
	RegisterAddress string                            `protobuf:"bytes,10,opt,name=register_address,json=registerAddress" json:"register_address,omitempty"`
	CurrentAddress  string                            `protobuf:"bytes,11,opt,name=current_address,json=currentAddress" json:"current_address,omitempty"`
	Telephone       string                            `protobuf:"bytes,12,opt,name=telephone" json:"telephone,omitempty"`
	Email           string                            `protobuf:"bytes,13,opt,name=email" json:"email,omitempty"`
	OrgCategory     string                            `protobuf:"bytes,14,opt,name=org_category,json=orgCategory" json:"org_category,omitempty"`
	// 三方账本时:
	//           供应商维护两个账户
	//           核心企业维护一个还款账户到结算账户
	//           保理公司维护两个账户:一个放款账户到结算账户,一个收还款账户
	// 双方账本时：
	//           保理公司维护两个账户
	//           保理公司维护两个账户:一个放款账户到结算账户,一个收还款账户
	SettlementAccount *OrgBankAccount `protobuf:"bytes,15,opt,name=settlement_account,json=settlementAccount" json:"settlement_account,omitempty"`
	PolicyAccount     *OrgBankAccount `protobuf:"bytes,16,opt,name=policy_account,json=policyAccount" json:"policy_account,omitempty"`
	OrgFiles          []*LedgerFile   `protobuf:"bytes,17,rep,name=org_files,json=orgFiles" json:"org_files,omitempty"`
	OperateInfo       *OperateInfo    `protobuf:"bytes,18,opt,name=operate_info,json=operateInfo" json:"operate_info,omitempty"`
}

func (m *CommercialOrg) Reset()                    { *m = CommercialOrg{} }
func (m *CommercialOrg) String() string            { return proto.CompactTextString(m) }
func (*CommercialOrg) ProtoMessage()               {}
func (*CommercialOrg) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *CommercialOrg) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *CommercialOrg) GetAppName() string {
	if m != nil {
		return m.AppName
	}
	return ""
}

func (m *CommercialOrg) GetAppType() string {
	if m != nil {
		return m.AppType
	}
	return ""
}

func (m *CommercialOrg) GetOrgCode() string {
	if m != nil {
		return m.OrgCode
	}
	return ""
}

func (m *CommercialOrg) GetRegistedNo() string {
	if m != nil {
		return m.RegistedNo
	}
	return ""
}

func (m *CommercialOrg) GetTaxRegistrationCertificateNo() string {
	if m != nil {
		return m.TaxRegistrationCertificateNo
	}
	return ""
}

func (m *CommercialOrg) GetOrgCorporate() string {
	if m != nil {
		return m.OrgCorporate
	}
	return ""
}

func (m *CommercialOrg) GetContactPerson() []*CommercialOrg_OrgContactPerson {
	if m != nil {
		return m.ContactPerson
	}
	return nil
}

func (m *CommercialOrg) GetIntroduction() string {
	if m != nil {
		return m.Introduction
	}
	return ""
}

func (m *CommercialOrg) GetRegisterAddress() string {
	if m != nil {
		return m.RegisterAddress
	}
	return ""
}

func (m *CommercialOrg) GetCurrentAddress() string {
	if m != nil {
		return m.CurrentAddress
	}
	return ""
}

func (m *CommercialOrg) GetTelephone() string {
	if m != nil {
		return m.Telephone
	}
	return ""
}

func (m *CommercialOrg) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *CommercialOrg) GetOrgCategory() string {
	if m != nil {
		return m.OrgCategory
	}
	return ""
}

func (m *CommercialOrg) GetSettlementAccount() *OrgBankAccount {
	if m != nil {
		return m.SettlementAccount
	}
	return nil
}

func (m *CommercialOrg) GetPolicyAccount() *OrgBankAccount {
	if m != nil {
		return m.PolicyAccount
	}
	return nil
}

func (m *CommercialOrg) GetOrgFiles() []*LedgerFile {
	if m != nil {
		return m.OrgFiles
	}
	return nil
}

func (m *CommercialOrg) GetOperateInfo() *OperateInfo {
	if m != nil {
		return m.OperateInfo
	}
	return nil
}

// 机构联系人
type CommercialOrg_OrgContactPerson struct {
	Name      string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Telephone string `protobuf:"bytes,2,opt,name=telephone" json:"telephone,omitempty"`
	Email     string `protobuf:"bytes,3,opt,name=email" json:"email,omitempty"`
}

func (m *CommercialOrg_OrgContactPerson) Reset()         { *m = CommercialOrg_OrgContactPerson{} }
func (m *CommercialOrg_OrgContactPerson) String() string { return proto.CompactTextString(m) }
func (*CommercialOrg_OrgContactPerson) ProtoMessage()    {}
func (*CommercialOrg_OrgContactPerson) Descriptor() ([]byte, []int) {
	return fileDescriptor1, []int{3, 0}
}

func (m *CommercialOrg_OrgContactPerson) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CommercialOrg_OrgContactPerson) GetTelephone() string {
	if m != nil {
		return m.Telephone
	}
	return ""
}

func (m *CommercialOrg_OrgContactPerson) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

// 三方机构关系上链数据定义
type FinancingRelation struct {
	LedgerId string `protobuf:"bytes,1,opt,name=ledger_id,json=ledgerId" json:"ledger_id,omitempty"`
	// 三方机构的信息
	// 供应商需要在扩展字段中保留供应商扩展信息
	Supplier   *CommercialOrg `protobuf:"bytes,2,opt,name=supplier" json:"supplier,omitempty"`
	Enterprise *CommercialOrg `protobuf:"bytes,3,opt,name=enterprise" json:"enterprise,omitempty"`
	BankFactor *CommercialOrg `protobuf:"bytes,4,opt,name=bank_factor,json=bankFactor" json:"bank_factor,omitempty"`
	// 三方机构关系确立时可以设定默认的融资利率
	Rate              int64         `protobuf:"varint,5,opt,name=rate" json:"rate,omitempty"`
	OrderFilesEncrypt []*LedgerFile `protobuf:"bytes,6,rep,name=order_files_encrypt,json=orderFilesEncrypt" json:"order_files_encrypt,omitempty"`
	// 三方机构关系确立的相关合同文件
	OrderFiles []*LedgerFile `protobuf:"bytes,7,rep,name=order_files,json=orderFiles" json:"order_files,omitempty"`
	// 保理向银行融资贷款时,勾选此三方的融资订单为质押
	// 银行需要拥有此三方账本,此字段只是备注记录,不做他用
	Banks    []*AppVo                `protobuf:"bytes,8,rep,name=banks" json:"banks,omitempty"`
	StepFlow *FinancingOrderStepFlow `protobuf:"bytes,9,opt,name=step_flow,json=stepFlow" json:"step_flow,omitempty"`
}

func (m *FinancingRelation) Reset()                    { *m = FinancingRelation{} }
func (m *FinancingRelation) String() string            { return proto.CompactTextString(m) }
func (*FinancingRelation) ProtoMessage()               {}
func (*FinancingRelation) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *FinancingRelation) GetLedgerId() string {
	if m != nil {
		return m.LedgerId
	}
	return ""
}

func (m *FinancingRelation) GetSupplier() *CommercialOrg {
	if m != nil {
		return m.Supplier
	}
	return nil
}

func (m *FinancingRelation) GetEnterprise() *CommercialOrg {
	if m != nil {
		return m.Enterprise
	}
	return nil
}

func (m *FinancingRelation) GetBankFactor() *CommercialOrg {
	if m != nil {
		return m.BankFactor
	}
	return nil
}

func (m *FinancingRelation) GetRate() int64 {
	if m != nil {
		return m.Rate
	}
	return 0
}

func (m *FinancingRelation) GetOrderFilesEncrypt() []*LedgerFile {
	if m != nil {
		return m.OrderFilesEncrypt
	}
	return nil
}

func (m *FinancingRelation) GetOrderFiles() []*LedgerFile {
	if m != nil {
		return m.OrderFiles
	}
	return nil
}

func (m *FinancingRelation) GetBanks() []*AppVo {
	if m != nil {
		return m.Banks
	}
	return nil
}

func (m *FinancingRelation) GetStepFlow() *FinancingOrderStepFlow {
	if m != nil {
		return m.StepFlow
	}
	return nil
}

// 银行保理双方关系上链数据定义
type BankLoanRelation struct {
	LedgerId string `protobuf:"bytes,1,opt,name=ledger_id,json=ledgerId" json:"ledger_id,omitempty"`
	// 银行和保理双方机构的信息
	BankFactor *CommercialOrg `protobuf:"bytes,2,opt,name=bank_factor,json=bankFactor" json:"bank_factor,omitempty"`
	BankInfo   *CommercialOrg `protobuf:"bytes,3,opt,name=bank_info,json=bankInfo" json:"bank_info,omitempty"`
	// 双方机构关系确立时可以设定默认的融资利率
	Rate int64 `protobuf:"varint,4,opt,name=rate" json:"rate,omitempty"`
	// 双方机构关系确立的相关合同文件
	OrderFiles []*LedgerFile           `protobuf:"bytes,5,rep,name=order_files,json=orderFiles" json:"order_files,omitempty"`
	StepFlow   *FinancingOrderStepFlow `protobuf:"bytes,6,opt,name=step_flow,json=stepFlow" json:"step_flow,omitempty"`
}

func (m *BankLoanRelation) Reset()                    { *m = BankLoanRelation{} }
func (m *BankLoanRelation) String() string            { return proto.CompactTextString(m) }
func (*BankLoanRelation) ProtoMessage()               {}
func (*BankLoanRelation) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

func (m *BankLoanRelation) GetLedgerId() string {
	if m != nil {
		return m.LedgerId
	}
	return ""
}

func (m *BankLoanRelation) GetBankFactor() *CommercialOrg {
	if m != nil {
		return m.BankFactor
	}
	return nil
}

func (m *BankLoanRelation) GetBankInfo() *CommercialOrg {
	if m != nil {
		return m.BankInfo
	}
	return nil
}

func (m *BankLoanRelation) GetRate() int64 {
	if m != nil {
		return m.Rate
	}
	return 0
}

func (m *BankLoanRelation) GetOrderFiles() []*LedgerFile {
	if m != nil {
		return m.OrderFiles
	}
	return nil
}

func (m *BankLoanRelation) GetStepFlow() *FinancingOrderStepFlow {
	if m != nil {
		return m.StepFlow
	}
	return nil
}

// 订单节点数据
type FinancingOrderStep struct {
	StepId      string       `protobuf:"bytes,1,opt,name=step_id,json=stepId" json:"step_id,omitempty"`
	StepName    string       `protobuf:"bytes,2,opt,name=step_name,json=stepName" json:"step_name,omitempty"`
	Org         *AppVo       `protobuf:"bytes,3,opt,name=org" json:"org,omitempty"`
	Remark      string       `protobuf:"bytes,4,opt,name=remark" json:"remark,omitempty"`
	IsStartNode bool         `protobuf:"varint,5,opt,name=is_start_node,json=isStartNode" json:"is_start_node,omitempty"`
	IsEndNode   bool         `protobuf:"varint,6,opt,name=is_end_node,json=isEndNode" json:"is_end_node,omitempty"`
	OaUrl       string       `protobuf:"bytes,7,opt,name=oa_url,json=oaUrl" json:"oa_url,omitempty"`
	OperateInfo *OperateInfo `protobuf:"bytes,8,opt,name=operate_info,json=operateInfo" json:"operate_info,omitempty"`
}

func (m *FinancingOrderStep) Reset()                    { *m = FinancingOrderStep{} }
func (m *FinancingOrderStep) String() string            { return proto.CompactTextString(m) }
func (*FinancingOrderStep) ProtoMessage()               {}
func (*FinancingOrderStep) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{6} }

func (m *FinancingOrderStep) GetStepId() string {
	if m != nil {
		return m.StepId
	}
	return ""
}

func (m *FinancingOrderStep) GetStepName() string {
	if m != nil {
		return m.StepName
	}
	return ""
}

func (m *FinancingOrderStep) GetOrg() *AppVo {
	if m != nil {
		return m.Org
	}
	return nil
}

func (m *FinancingOrderStep) GetRemark() string {
	if m != nil {
		return m.Remark
	}
	return ""
}

func (m *FinancingOrderStep) GetIsStartNode() bool {
	if m != nil {
		return m.IsStartNode
	}
	return false
}

func (m *FinancingOrderStep) GetIsEndNode() bool {
	if m != nil {
		return m.IsEndNode
	}
	return false
}

func (m *FinancingOrderStep) GetOaUrl() string {
	if m != nil {
		return m.OaUrl
	}
	return ""
}

func (m *FinancingOrderStep) GetOperateInfo() *OperateInfo {
	if m != nil {
		return m.OperateInfo
	}
	return nil
}

// 订单流程数据
type FinancingOrderStepFlow struct {
	CurrentStep *FinancingOrderStep `protobuf:"bytes,1,opt,name=current_step,json=currentStep" json:"current_step,omitempty"`
	Next        *FinancingOrderStep `protobuf:"bytes,2,opt,name=next" json:"next,omitempty"`
	OperateInfo *OperateInfo        `protobuf:"bytes,3,opt,name=operate_info,json=operateInfo" json:"operate_info,omitempty"`
}

func (m *FinancingOrderStepFlow) Reset()                    { *m = FinancingOrderStepFlow{} }
func (m *FinancingOrderStepFlow) String() string            { return proto.CompactTextString(m) }
func (*FinancingOrderStepFlow) ProtoMessage()               {}
func (*FinancingOrderStepFlow) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{7} }

func (m *FinancingOrderStepFlow) GetCurrentStep() *FinancingOrderStep {
	if m != nil {
		return m.CurrentStep
	}
	return nil
}

func (m *FinancingOrderStepFlow) GetNext() *FinancingOrderStep {
	if m != nil {
		return m.Next
	}
	return nil
}

func (m *FinancingOrderStepFlow) GetOperateInfo() *OperateInfo {
	if m != nil {
		return m.OperateInfo
	}
	return nil
}

func init() {
	proto.RegisterType((*APPConfigBrief)(nil), "protos.APPConfigBrief")
	proto.RegisterType((*APPConfig)(nil), "protos.APPConfig")
	proto.RegisterType((*NodeConfig)(nil), "protos.nodeConfig")
	proto.RegisterType((*CommercialOrg)(nil), "protos.CommercialOrg")
	proto.RegisterType((*CommercialOrg_OrgContactPerson)(nil), "protos.CommercialOrg.OrgContactPerson")
	proto.RegisterType((*FinancingRelation)(nil), "protos.FinancingRelation")
	proto.RegisterType((*BankLoanRelation)(nil), "protos.BankLoanRelation")
	proto.RegisterType((*FinancingOrderStep)(nil), "protos.FinancingOrderStep")
	proto.RegisterType((*FinancingOrderStepFlow)(nil), "protos.FinancingOrderStepFlow")
}

func init() { proto.RegisterFile("financingorder/configuration.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 1185 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x56, 0xdd, 0x6e, 0xdb, 0x36,
	0x14, 0x46, 0xe2, 0xc4, 0xb1, 0x8f, 0x62, 0xc7, 0x61, 0xd7, 0x4e, 0x4b, 0x8b, 0x36, 0x73, 0xd7,
	0x2e, 0xdb, 0x00, 0x07, 0x73, 0xb7, 0xde, 0x0c, 0x05, 0x96, 0x78, 0x09, 0x10, 0xac, 0x4b, 0x02,
	0xb5, 0xdd, 0x80, 0xde, 0x08, 0x8c, 0x44, 0xab, 0x84, 0x65, 0x92, 0x20, 0x69, 0x24, 0xe9, 0x83,
	0xec, 0x7e, 0x4f, 0x32, 0x0c, 0xd8, 0xd3, 0xec, 0x29, 0x06, 0xfe, 0x48, 0x96, 0x9c, 0xba, 0x48,
	0xaf, 0xac, 0xf3, 0xf1, 0x3b, 0xf4, 0xe1, 0x77, 0xbe, 0x23, 0x0a, 0xfa, 0x63, 0xca, 0x30, 0x4b,
	0x28, 0xcb, 0xb8, 0x4c, 0x89, 0xdc, 0x4f, 0x38, 0x1b, 0xd3, 0x6c, 0x26, 0xb1, 0xa6, 0x9c, 0x0d,
	0x84, 0xe4, 0x9a, 0xa3, 0xa6, 0xfd, 0x51, 0x3b, 0xf7, 0x6f, 0x70, 0xa7, 0xd3, 0x82, 0xd4, 0xff,
	0x19, 0xba, 0x07, 0xe7, 0xe7, 0x23, 0x9b, 0x7e, 0x28, 0x29, 0x19, 0xa3, 0xcf, 0x60, 0x1d, 0x0b,
	0x71, 0x92, 0x86, 0x2b, 0xbb, 0x2b, 0x7b, 0xed, 0xc8, 0x05, 0x28, 0x84, 0x0d, 0x2c, 0xc4, 0x29,
	0x9e, 0x92, 0x70, 0xd5, 0xe2, 0x45, 0xd8, 0xff, 0x77, 0x0d, 0xda, 0xe5, 0x16, 0x4b, 0xb2, 0xef,
	0x41, 0x13, 0x0b, 0xf1, 0x2b, 0xb9, 0xf6, 0xc9, 0x3e, 0xaa, 0xee, 0xda, 0xa8, 0xed, 0xea, 0x57,
	0x5e, 0x5f, 0x0b, 0x12, 0xae, 0x95, 0x2b, 0x26, 0x44, 0x4f, 0xa1, 0x8b, 0x85, 0x18, 0xe1, 0x3c,
	0xbf, 0xc0, 0xc9, 0xe4, 0x8d, 0xcc, 0xc3, 0x75, 0x4b, 0x58, 0x40, 0xd1, 0x0e, 0xb4, 0x14, 0x49,
	0x66, 0x92, 0x9c, 0x88, 0xb0, 0x69, 0x19, 0x65, 0x8c, 0x7e, 0x80, 0x80, 0xf1, 0x94, 0xb8, 0x9a,
	0x55, 0xb8, 0xb1, 0xdb, 0xd8, 0x0b, 0x86, 0xc8, 0x49, 0xa2, 0x06, 0xf3, 0xa5, 0xa8, 0x4a, 0x33,
	0x35, 0x71, 0x99, 0xd9, 0x6a, 0x5b, 0xae, 0x26, 0x1f, 0xa2, 0x87, 0x00, 0x5c, 0x66, 0x07, 0x69,
	0x2a, 0x89, 0x52, 0x61, 0xdb, 0x2e, 0x56, 0x10, 0x53, 0xf3, 0x05, 0x7d, 0x3f, 0xe2, 0x4c, 0xe3,
	0x44, 0xdb, 0x0d, 0xc0, 0xd5, 0x5c, 0x47, 0xd1, 0x57, 0xd0, 0x99, 0x23, 0xaf, 0x49, 0x1e, 0x06,
	0x96, 0x56, 0x07, 0xd1, 0x1e, 0x6c, 0x95, 0x00, 0x39, 0x9a, 0x62, 0x9a, 0x87, 0x9b, 0x96, 0xb7,
	0x08, 0x1b, 0xa6, 0x26, 0xc9, 0xbb, 0xea, 0x1f, 0x77, 0x1c, 0x73, 0x01, 0x36, 0x15, 0x56, 0x20,
	0xf3, 0xd7, 0x5d, 0x57, 0x61, 0x1d, 0x45, 0xdf, 0x42, 0xaf, 0x82, 0xb8, 0x3f, 0xdf, 0xb2, 0xcc,
	0x1b, 0x38, 0xfa, 0x0e, 0x9a, 0x5c, 0x9c, 0xb0, 0x31, 0x0f, 0x7b, 0xbb, 0x2b, 0x7b, 0xc1, 0xf0,
	0x4e, 0x21, 0xf0, 0x99, 0x20, 0x12, 0x6b, 0x62, 0x96, 0x22, 0x4f, 0xe9, 0xbf, 0x07, 0x98, 0x6b,
	0x8d, 0x7a, 0xd0, 0x10, 0x64, 0xea, 0x4d, 0x64, 0x1e, 0x8d, 0xf8, 0x2a, 0x9d, 0x8c, 0x88, 0xd4,
	0x85, 0x01, 0x7d, 0x88, 0x76, 0x21, 0x50, 0xe9, 0xe4, 0x8d, 0x22, 0xb2, 0x62, 0xa4, 0x2a, 0x64,
	0xda, 0xe3, 0xc3, 0xf3, 0x3f, 0x7e, 0xf1, 0x7e, 0xaa, 0x20, 0xfd, 0xff, 0x9a, 0xd0, 0x19, 0xf1,
	0xe9, 0x94, 0xc8, 0x84, 0xe2, 0xfc, 0x4c, 0x66, 0x9f, 0x3a, 0x04, 0x55, 0xbb, 0x36, 0xea, 0x76,
	0xfd, 0x02, 0x5a, 0x5c, 0x66, 0x71, 0xc2, 0xd3, 0xd2, 0xc9, 0x5c, 0x66, 0x23, 0x9e, 0x12, 0xf4,
	0x08, 0x02, 0x49, 0x32, 0xaa, 0x34, 0x49, 0x63, 0xc6, 0xbd, 0x8d, 0xa1, 0x80, 0x4e, 0x39, 0x3a,
	0x82, 0x47, 0x1a, 0x5f, 0xc5, 0x0e, 0x71, 0xb3, 0x1d, 0x27, 0x44, 0x6a, 0x3a, 0xa6, 0x09, 0xd6,
	0xc4, 0x24, 0x39, 0x67, 0x3f, 0xd0, 0xf8, 0x2a, 0xaa, 0xb0, 0x46, 0x73, 0xd2, 0x29, 0x47, 0x8f,
	0xa1, 0xe3, 0x4a, 0x90, 0x82, 0x1b, 0xdd, 0xc3, 0x0d, 0x9b, 0xb4, 0x69, 0xeb, 0xf0, 0x18, 0xfa,
	0x0d, 0xba, 0x89, 0x6b, 0x5e, 0x2c, 0x88, 0x54, 0x9c, 0x85, 0x2d, 0x3b, 0x15, 0x4f, 0x8b, 0xa6,
	0xd5, 0x04, 0x1a, 0x9c, 0x99, 0x5c, 0x4b, 0x3f, 0xb7, 0xec, 0xa8, 0x93, 0x54, 0x43, 0xd4, 0x87,
	0x4d, 0xca, 0xb4, 0xe4, 0xe9, 0x2c, 0x31, 0x05, 0xf9, 0x99, 0xa8, 0x61, 0xe8, 0x1b, 0xe8, 0xf9,
	0xc3, 0xca, 0x18, 0xfb, 0xd9, 0x71, 0x73, 0xb1, 0x55, 0xe0, 0xc5, 0x00, 0x7d, 0x0d, 0x5b, 0xc9,
	0x4c, 0x4a, 0xc2, 0x74, 0xc9, 0x74, 0xa3, 0xd1, 0xf5, 0x70, 0x41, 0x7c, 0x00, 0x6d, 0x4d, 0x72,
	0x22, 0xde, 0x71, 0x46, 0xfc, 0x54, 0xcc, 0x01, 0xd3, 0x56, 0x62, 0x2d, 0xeb, 0xa6, 0xc0, 0x05,
	0xe8, 0x4b, 0xd8, 0xb4, 0xfa, 0x60, 0x4d, 0x32, 0x2e, 0xaf, 0xbd, 0xf3, 0x03, 0x23, 0x8f, 0x87,
	0xd0, 0x11, 0x20, 0x45, 0xb4, 0xce, 0xc9, 0xd4, 0x96, 0x90, 0x24, 0x7c, 0xc6, 0xb4, 0x35, 0x7e,
	0x30, 0xbc, 0x57, 0xda, 0x5a, 0x66, 0x87, 0x98, 0x4d, 0x0e, 0xdc, 0x6a, 0xb4, 0x3d, 0xcf, 0xf0,
	0x10, 0x7a, 0x01, 0x5d, 0xc1, 0x73, 0x9a, 0x5c, 0x97, 0x5b, 0xf4, 0x3e, 0xba, 0x45, 0xc7, 0xb1,
	0x8b, 0xf4, 0x7d, 0x68, 0x9b, 0x42, 0xc7, 0x34, 0x27, 0x2a, 0xdc, 0xae, 0xbf, 0xb4, 0x5e, 0x92,
	0x34, 0x23, 0xf2, 0x98, 0xe6, 0x24, 0x32, 0x86, 0x33, 0x0f, 0x0a, 0x3d, 0x87, 0x4d, 0xee, 0x66,
	0x2d, 0xa6, 0x66, 0x0e, 0xd1, 0xf2, 0x39, 0x0c, 0xf8, 0x3c, 0xd8, 0x79, 0x0b, 0xbd, 0xc5, 0x06,
	0x23, 0x04, 0x6b, 0xcc, 0x38, 0xdf, 0x4d, 0x84, 0x7d, 0xae, 0xab, 0xbd, 0xba, 0x54, 0xed, 0x46,
	0x45, 0xed, 0xfe, 0x3f, 0x0d, 0xd8, 0x3e, 0x2e, 0x6e, 0xa4, 0x88, 0xe4, 0xd6, 0xb0, 0xe8, 0x3e,
	0xb4, 0x73, 0x7b, 0x82, 0x98, 0x16, 0x43, 0xd7, 0x72, 0xc0, 0x49, 0x8a, 0xbe, 0x87, 0x96, 0x9a,
	0x09, 0x91, 0x53, 0x22, 0xed, 0xbf, 0x04, 0xc3, 0xbb, 0x1f, 0x74, 0x65, 0x54, 0xd2, 0xd0, 0x8f,
	0x00, 0x84, 0x69, 0x22, 0x85, 0xa4, 0xca, 0xcd, 0xe4, 0xd2, 0xa4, 0x0a, 0x11, 0x3d, 0x87, 0xe0,
	0x02, 0xb3, 0x49, 0x3c, 0xc6, 0x89, 0xe6, 0xd2, 0x0e, 0xec, 0xf2, 0x3c, 0xc3, 0x3c, 0xb6, 0x44,
	0x23, 0x8e, 0x9d, 0x2c, 0x33, 0xc3, 0x8d, 0xc8, 0x3e, 0xa3, 0x43, 0xb8, 0x63, 0x2f, 0x5c, 0xd7,
	0xaf, 0x98, 0xb0, 0x44, 0x5e, 0x0b, 0x1d, 0x36, 0x97, 0xf6, 0x6d, 0xdb, 0xd2, 0x6d, 0xe7, 0x8e,
	0x1c, 0x19, 0x3d, 0x83, 0xa0, 0xb2, 0xc7, 0xe2, 0x45, 0x55, 0xc9, 0x85, 0x79, 0x2e, 0x7a, 0x0c,
	0xeb, 0xa6, 0x34, 0xe5, 0x27, 0xb8, 0x53, 0xd0, 0x0f, 0x84, 0xf8, 0x9d, 0x47, 0x6e, 0x0d, 0xfd,
	0x04, 0x6d, 0xa5, 0x89, 0x88, 0xc7, 0x39, 0xbf, 0xb4, 0xd3, 0x19, 0x0c, 0x1f, 0x16, 0xc4, 0xb2,
	0x3d, 0x67, 0x66, 0xd3, 0x57, 0x9a, 0x88, 0xe3, 0x9c, 0x5f, 0x46, 0x2d, 0xe5, 0x9f, 0xfa, 0x7f,
	0xad, 0x42, 0xcf, 0xf8, 0xf4, 0x25, 0xc7, 0xec, 0x76, 0x2d, 0x5c, 0x10, 0x76, 0xf5, 0xb6, 0xc2,
	0x0e, 0xa1, 0x6d, 0xf3, 0xac, 0x7d, 0x3f, 0xda, 0xc6, 0x96, 0xe1, 0x19, 0xf7, 0x96, 0xcd, 0x58,
	0xab, 0x34, 0x63, 0x41, 0xc8, 0xf5, 0x5b, 0x09, 0x59, 0xd3, 0xa8, 0xf9, 0x89, 0x1a, 0xfd, 0xb9,
	0x0a, 0xe8, 0x26, 0x09, 0x7d, 0x0e, 0x1b, 0x76, 0xcf, 0x52, 0xa3, 0xa6, 0x09, 0x4f, 0x52, 0x23,
	0x9f, 0x5d, 0x60, 0xf3, 0xeb, 0xc5, 0x6e, 0x66, 0xef, 0x97, 0x47, 0xd0, 0xe0, 0x32, 0xf3, 0x02,
	0x2c, 0x34, 0xd4, 0xac, 0x98, 0x2f, 0x2c, 0x49, 0xa6, 0x58, 0x4e, 0xfc, 0x25, 0xe3, 0x23, 0xd4,
	0x87, 0x0e, 0x55, 0xb1, 0xd2, 0x58, 0xea, 0xd8, 0xdc, 0xaf, 0xd6, 0xa1, 0xad, 0x28, 0xa0, 0xea,
	0x95, 0xc1, 0x4e, 0xcd, 0x3d, 0xf4, 0x10, 0x02, 0x6a, 0xfc, 0x99, 0x3a, 0x46, 0xd3, 0x32, 0xda,
	0x54, 0x1d, 0xb1, 0xd4, 0xae, 0xdf, 0x85, 0x26, 0xc7, 0xf1, 0x4c, 0xe6, 0xfe, 0xe2, 0x58, 0xe7,
	0xd8, 0x7c, 0x60, 0x2d, 0xbe, 0x5c, 0x5a, 0xb7, 0x7b, 0xb9, 0xf4, 0xff, 0x5e, 0x81, 0x7b, 0x1f,
	0x56, 0x0f, 0xbd, 0x80, 0xcd, 0xe2, 0x35, 0x6f, 0x8e, 0x6e, 0x15, 0x0a, 0x86, 0x3b, 0xcb, 0x35,
	0x8f, 0x02, 0xcf, 0xb7, 0xda, 0x0e, 0x60, 0x8d, 0x91, 0x2b, 0xed, 0xdd, 0xf5, 0xb1, 0x34, 0xcb,
	0xbb, 0x71, 0x82, 0xc6, 0xed, 0x4e, 0x70, 0x78, 0x0a, 0x4f, 0x12, 0x3e, 0x1d, 0x5c, 0x51, 0xcc,
	0x32, 0x86, 0x07, 0x97, 0x97, 0x97, 0x45, 0x4a, 0xfd, 0x53, 0xfb, 0xed, 0x93, 0x8c, 0xea, 0x77,
	0xb3, 0x8b, 0x41, 0xc2, 0xa7, 0xfb, 0x57, 0x2c, 0x49, 0xf6, 0x1d, 0x6d, 0xbf, 0x4e, 0xbb, 0x70,
	0x5f, 0xea, 0xcf, 0xfe, 0x0f, 0x00, 0x00, 0xff, 0xff, 0x1a, 0x48, 0x66, 0xbe, 0xd6, 0x0b, 0x00,
	0x00,
}
