// Code generated by protoc-gen-go.
// source: contract/contract_request.proto
// DO NOT EDIT!

package contract

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 执行合约请求参数
type ContractExcuteRequest struct {
	Action       string `protobuf:"bytes,1,opt,name=action" json:"action,omitempty"`
	No           string `protobuf:"bytes,2,opt,name=no" json:"no,omitempty"`
	ContractData []byte `protobuf:"bytes,3,opt,name=contractData,proto3" json:"contractData,omitempty"`
}

func (m *ContractExcuteRequest) Reset()                    { *m = ContractExcuteRequest{} }
func (m *ContractExcuteRequest) String() string            { return proto.CompactTextString(m) }
func (*ContractExcuteRequest) ProtoMessage()               {}
func (*ContractExcuteRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *ContractExcuteRequest) GetAction() string {
	if m != nil {
		return m.Action
	}
	return ""
}

func (m *ContractExcuteRequest) GetNo() string {
	if m != nil {
		return m.No
	}
	return ""
}

func (m *ContractExcuteRequest) GetContractData() []byte {
	if m != nil {
		return m.ContractData
	}
	return nil
}

// 合约新增审批日志请求参数
type ContractAddCheckLogRequest struct {
	No string `protobuf:"bytes,1,opt,name=no" json:"no,omitempty"`
	// refer message contract.ContractCheckFlowData
	ContractCheckFlowData []byte `protobuf:"bytes,2,opt,name=contractCheckFlowData,proto3" json:"contractCheckFlowData,omitempty"`
}

func (m *ContractAddCheckLogRequest) Reset()                    { *m = ContractAddCheckLogRequest{} }
func (m *ContractAddCheckLogRequest) String() string            { return proto.CompactTextString(m) }
func (*ContractAddCheckLogRequest) ProtoMessage()               {}
func (*ContractAddCheckLogRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *ContractAddCheckLogRequest) GetNo() string {
	if m != nil {
		return m.No
	}
	return ""
}

func (m *ContractAddCheckLogRequest) GetContractCheckFlowData() []byte {
	if m != nil {
		return m.ContractCheckFlowData
	}
	return nil
}

// 合约查询请求参数
type ContractQueryRequest struct {
	No string `protobuf:"bytes,1,opt,name=no" json:"no,omitempty"`
}

func (m *ContractQueryRequest) Reset()                    { *m = ContractQueryRequest{} }
func (m *ContractQueryRequest) String() string            { return proto.CompactTextString(m) }
func (*ContractQueryRequest) ProtoMessage()               {}
func (*ContractQueryRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *ContractQueryRequest) GetNo() string {
	if m != nil {
		return m.No
	}
	return ""
}

func init() {
	proto.RegisterType((*ContractExcuteRequest)(nil), "protos.ContractExcuteRequest")
	proto.RegisterType((*ContractAddCheckLogRequest)(nil), "protos.ContractAddCheckLogRequest")
	proto.RegisterType((*ContractQueryRequest)(nil), "protos.ContractQueryRequest")
}

func init() { proto.RegisterFile("contract/contract_request.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 229 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x92, 0x4f, 0xce, 0xcf, 0x2b,
	0x29, 0x4a, 0x4c, 0x2e, 0xd1, 0x87, 0x31, 0xe2, 0x8b, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0xf4,
	0x0a, 0x8a, 0xf2, 0x4b, 0xf2, 0x85, 0xd8, 0xc0, 0x54, 0xb1, 0x52, 0x32, 0x97, 0xa8, 0x33, 0x54,
	0x85, 0x6b, 0x45, 0x72, 0x69, 0x49, 0x6a, 0x10, 0x44, 0x99, 0x90, 0x18, 0x17, 0x5b, 0x62, 0x72,
	0x49, 0x66, 0x7e, 0x9e, 0x04, 0xa3, 0x02, 0xa3, 0x06, 0x67, 0x10, 0x94, 0x27, 0xc4, 0xc7, 0xc5,
	0x94, 0x97, 0x2f, 0xc1, 0x04, 0x16, 0x63, 0xca, 0xcb, 0x17, 0x52, 0xe2, 0xe2, 0x81, 0x59, 0xe1,
	0x92, 0x58, 0x92, 0x28, 0xc1, 0xac, 0xc0, 0xa8, 0xc1, 0x13, 0x84, 0x22, 0xa6, 0x94, 0xc4, 0x25,
	0x05, 0xb3, 0xc4, 0x31, 0x25, 0xc5, 0x39, 0x23, 0x35, 0x39, 0xdb, 0x27, 0x3f, 0x1d, 0x66, 0x13,
	0xc4, 0x44, 0x46, 0xb8, 0x89, 0x26, 0x5c, 0xa2, 0x30, 0xdd, 0x60, 0xa5, 0x6e, 0x39, 0xf9, 0xe5,
	0x60, 0xa3, 0x99, 0xc0, 0x46, 0x63, 0x97, 0x54, 0x52, 0xe3, 0x12, 0x81, 0xd9, 0x11, 0x58, 0x9a,
	0x5a, 0x54, 0x89, 0xc3, 0x74, 0x27, 0x27, 0x50, 0xd8, 0xe4, 0xea, 0x55, 0x64, 0x26, 0xe6, 0xa5,
	0xe7, 0x25, 0xea, 0x95, 0x97, 0x97, 0x43, 0x42, 0xa4, 0x58, 0x0f, 0x66, 0x6e, 0x94, 0x7c, 0x7a,
	0x66, 0x49, 0x46, 0x69, 0x92, 0x5e, 0x72, 0x7e, 0xae, 0x7e, 0x45, 0x5e, 0x72, 0xb2, 0x3e, 0x44,
	0x01, 0x3c, 0x28, 0x93, 0x20, 0x81, 0x67, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x15, 0xfe, 0x64,
	0xf2, 0x66, 0x01, 0x00, 0x00,
}
